@page "/courses/details/{id}"
@using Infastructure.Models

<PageTitle>Course Details</PageTitle>

<section class="program-detials-section">
    @if (courseDetails == null)
    {
        <p>Loading...</p>
    } else
    {
        <div class="details-header" style="background-image:linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)) , url('@courseDetails?.ImageUri')">

            @if (courseDetails.IsBestseller)
            {
                <img class="bestseller" src="/Images/Courses/badge.svg" alt="Bestseller!"/>
            }
            <h1>@courseDetails?.Title</h1>
            <p>@courseDetails?.Ingress</p>
            <div class="reviews">
                <span class="review-item stars">
                    @GenerateStars() @courseDetails?.StarRating K reviews
                </span>
                <span class="review-item">
                    <i class="fa-regular fa-thumbs-up"></i> @courseDetails?.LikesInNumbers Likes
                </span>
                <span class="review-item">
                    <i class="fa-regular fa-clock"></i> @courseDetails?.Hours Hours
                </span>

            </div>
        </div>
        <div class="details-content">
            <div class="left-content">
                <div class="details-body">
                    @((MarkupString)courseDetails.ContentDescription)
                </div>

                <div class="program-details">
                    @foreach (var i in Enumerable.Range(0, courseDetails.ProgramId.Count))
                    {
                        <div>
                            <h2 class="program-title">@courseDetails?.ProgramTitle[i]</h2>
                            <p class="program-description">@courseDetails?.ProgramDescription[i]</p>
                        </div>
                    }
                </div>
            </div>

            <div class="program-infocard">
                <h3>This course includes:</h3>
                <ul class="infocard-list">
                    <li>
                        <i class="fa-regular fa-clapperboard-play"></i> @courseDetails.Hours hours on-demand video
                    </li>
                    <li>
                        <i class="fa-regular fa-newspaper"></i> Some great articles!
                    </li>
                    <li>
                        <i class="fa-regular fa-download"></i> Fantastic downloadable resources
                    </li>
                    <li>
                        <i class="fa-regular fa-infinity"></i> Full lifetime access
                    </li>
                    <li>
                        <i class="fa-regular fa-file-certificate"></i> Certificate of completion
                    </li>
                </ul>
                @if (!string.IsNullOrEmpty(courseDetails.DiscountPrice.ToString()))
                {
                    <div class="discount"> $@courseDetails.DiscountPrice </div>
                }
                <div class="pricing @(!string.IsNullOrEmpty(courseDetails.DiscountPrice.ToString())? "discount-enabled" : "")">$@courseDetails.CurrentPrice</div>
                <button type="submit" class="btn-theme">Join</button>
            </div>
        </div>
    }
    
</section>

@code {
    private CourseDetailModel? courseDetails;
    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery
        {
            Query = $"{{getCourseById(id:\"{Id}\") {{ id imageUri isBestSeller isDigital categories title ingress starRating reviews likes hours authors {{ name }} prices {{ currency currentPrice discountPrice }} content {{ description includes programDetails {{id title description}}}}}}}}"
        };

        var response = await Http.PostAsJsonAsync("https://coursesprovider-silicon-bnar.azurewebsites.net/api/graphql?code=3rOEfiwSz9VcWDjwXQUbtxAhmkAiu57NCWM-bZXR5qGGAzFuLqkrQA%3D%3D", query);


        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            var courses = result?.Data.GetProperty("getCourseById");

            if(courses.HasValue)
            {
                var course = courses.Value;
                courseDetails = new CourseDetailModel
                    {
                        Id = course.GetProperty("id").GetString(),
                        ImageUri = course.GetProperty("imageUri").GetString(),
                        IsBestseller = course.GetProperty("isBestSeller").GetBoolean(),
                        Title = course.GetProperty("title").GetString(),
                        Ingress = course.GetProperty("ingress").GetString(),
                        Author = course.GetProperty("authors").EnumerateArray().Select(author => author.GetProperty("name").GetString()).FirstOrDefault(),
                        CurrentPrice = course.GetProperty("prices").GetProperty("currentPrice").GetDecimal(),
                        DiscountPrice = course.GetProperty("prices").GetProperty("discountPrice").GetDecimal(),
                        Hours = course.GetProperty("hours").ToString(),
                        StarRating = course.GetProperty("starRating").GetDecimal(),
                        LikesInNumbers = course.GetProperty("likes").ToString(),
                        ContentDescription = course.GetProperty("content").GetProperty("description").GetString(),
                        ContentIncludes = string.Join(", ", course.GetProperty("content").GetProperty("includes").EnumerateArray().Select(include => include.GetString())),
                        ProgramId = course.GetProperty("content").GetProperty("programDetails").EnumerateArray().Select(program => program.GetProperty("id").GetInt32().ToString()).ToList(),
                        ProgramTitle = course.GetProperty("content").GetProperty("programDetails").EnumerateArray().Select(program => program.GetProperty("title").GetString()).ToList(),
                        ProgramDescription = course.GetProperty("content").GetProperty("programDetails").EnumerateArray().Select(program => program.GetProperty("description").GetString()).ToList()
                    };
            } 
        }
    }

    public string GenerateStars()
    {
        var random = new Random();
        var starCount = random.Next(3, 6);
        return new string('★', starCount);
    }
}
