@page "/courses"
@using Infastructure.Models
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json

@attribute [Authorize]
@attribute [StreamRendering]

<PageTitle>Courses</PageTitle>

<section class="courses">
    <div class="container">
        <h1>Courses</h1>
        <form id="form-filters">
            <select>
                <option>All categories</option>
            </select>
            <div>
                <input id="form-search" name="form-search" placeholder="Search" />
            </div>
        </form>
        <div class="container-grid">
            <div class="course-items">
                @if (courses != null)
                {
                    @foreach (var course in courses)
                    {
                        <NavLink href="@($"/Courses/Details/{course.Id}")" class="top-content">
                            @if (course.IsBestseller)
                            {
                                <div class="bestseller">Best Seller</div>
                            }
                            <button class="btn-circle bookmark"><i class="fa-regular fa-bookmark"></i></button>
                            <img src="@course.ImageUri" alt="@course.Title" />
                            <div class="content">
                                <h5 class="title">@course.Title</h5>
                                <p class="author">Author @course.Author</p>
                                <div class="pricing">
                                    @if (!string.IsNullOrEmpty(course.DiscountPrice.ToString()))
                                    {
                                        <div class="discount"> @course.DiscountPrice </div>
                                    }
                                    <div class="price @(!string.IsNullOrEmpty(course.DiscountPrice.ToString())? "discount-enabled" : "")">@course.CurrentPrice</div>
                                </div>
                                <div class="footer">
                                    <div class="hours">
                                        <i class="fa-regular fa-clock"></i> @course.Hours hours
                                    </div>
                                    <div class="likes">
                                        <i class="fa-regular fa-thumbs-up"></i> @course.LikesInProcent (@course.LikesInNumbers)
                                    </div>
                                </div>
                            </div>
                        </NavLink>
                    }
                }
                else
                {
                    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                }
            </div>
        </div>
    </div>
</section>


@code {
    private List<CourseCardModel>? courses;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery { Query = "{getAllCourses {id imageUri isBestSeller title authors{name} categories prices{currentPrice discountPrice} hours likes likesInProcent}}" };
        var response = await Http.PostAsJsonAsync("https://coursesprovider-silicon-bnar.azurewebsites.net/api/graphql?code=3rOEfiwSz9VcWDjwXQUbtxAhmkAiu57NCWM-bZXR5qGGAzFuLqkrQA%3D%3D", query);

        if(response.IsSuccessStatusCode){
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            courses = result?.Data.GetProperty("getAllCourses").EnumerateArray().Select(courses => new CourseCardModel
            {
                Id = courses.GetProperty("id").GetString(),
                ImageUri = courses.GetProperty("imageUri").GetString(),
                IsBestseller = courses.GetProperty("isBestSeller").GetBoolean(),
                Title = courses.GetProperty("title").GetString(),
                Author = courses.GetProperty("authors").EnumerateArray().Select(author => author.GetProperty("name").GetString()).FirstOrDefault(),
                CurrentPrice = courses.GetProperty("prices").GetProperty("currentPrice").GetDecimal(),
                DiscountPrice = courses.GetProperty("prices").GetProperty("discountPrice").GetDecimal(),
                Hours = courses.GetProperty("hours").ToString(),
                LikesInProcent = courses.GetProperty("likesInProcent").GetString(),
                LikesInNumbers = courses.GetProperty("likes").ToString()
            }).ToList();

        }
    }
}





