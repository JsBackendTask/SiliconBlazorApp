@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using SiliconBlazorApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<h1>Register confirmation</h1>

<StatusMessage Message="@statusMessage" />

<div class="top-confirmation" id="signup">
    <EditForm Model="Model" asp-route-returnUrl="@ReturnUrl" OnValidSubmit="submit" FormName="ConfirmationForm" class="signup-form">
        <DataAnnotationsValidator />
        <h1>Confirm account</h1>

        <label for="code" class="labels">Code</label>
        <InputText @bind-Value="Model.Code" class="firstname" id="code" />
        <span class="error error-styling"><ValidationMessage For="@(() => Model.Code)" /></span>

        <button type="submit" class="btn-theme-s" formmethod="post">Confirm Email</button>
    </EditForm>

    <EditForm FormName="ResendForm" Model="Model" OnSubmit="ResendCode">
        <p class="signin-text">No code? <button type="submit" class="btn-gray" @onclick="@(async () => await ResendCode())"> Get a new one here.</button></p>
        
        <InputText @bind-Value="Model.Code" class="hide"></InputText>
        
    </EditForm>
</div>

@code {

    [SupplyParameterFromForm]
    public VerifyCodeModel Model { get; set; } = new VerifyCodeModel();

    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        Email = query["email"];
    }

    private async Task submit()
    {
        var Code = Model.Code;

        var result = await Http.PostAsJsonAsync("https://verificationprovider-silicon-bnar.azurewebsites.net/api/verification?code=wJTjN_iO4id3ZhM2bY7MZnF4iaQ8iR7TTTss3KcDi_P_AzFupPbOeQ%3D%3D", new {Email = Email, Code = Code} ); 
        if (result.IsSuccessStatusCode)
        {
            var user = await UserManager.FindByEmailAsync(Email!);
            user!.EmailConfirmed = true;
            await UserManager.UpdateAsync(user);

            NavigationManager.NavigateTo($"/Account/Login");
        }
        else
        {
            statusMessage = "Error confirming email";
        }
    }

    private async Task ResendCode()
    {
        var result = await Http.PostAsJsonAsync("https://verificationprovider-silicon-bnar.azurewebsites.net/api/Verify?code=GYUemekurKbemZgcZjQjK_WZHFRHCBUF6FHqAeYVq5BBAzFuDzsozw%3D%3D", new { Email = Email });
        if (result.IsSuccessStatusCode)
        {
            statusMessage = "Code resent";
        }
        else
        {
            statusMessage = "Error resending code";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else 
        {

        }
    }


    public class VerifyCodeModel
    {
        [Required(ErrorMessage = "Invalid code")]
        public string Code { get; set; } = null!;
    }
}
